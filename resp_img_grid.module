<?php

/**
 * Implements hook_init().
 * Add js and css to the page
 */
function resp_img_grid_init() {
  drupal_add_css(drupal_get_path('module', 'resp_img_grid') . '/css/resp_img_grid.css'); 
  drupal_add_js(drupal_get_path('module', 'resp_img_grid') . '/js/resp_img_grid.js');
}

/**
 * Implements hook_preprocess_html().
 * Add a no-touch class to the template body
 */
function resp_img_grid_preprocess_html(&$vars) {
  $vars['classes_array'][] = 'no-touch';
}

/**
 * Implements hook_field_formatter_info().
 */
function resp_img_grid_field_formatter_info() {
  $formatters = array(
    'resp_img_grid_formatter' => array(
      'label' => t('Responsive Image'),
      'field types' => array('image'),
      'settings' => array(
        'image_style' => '',
        'image_link' => '',
      ),
    ),
  );
  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function resp_img_grid_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display  = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary  = array();
  $image_styles = image_style_options(FALSE);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);
  // Styles could be lost because of enabled/disabled modules that defines
  // their styles in code.
  if (isset($image_styles[$settings['image_style']])) {
    $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
  }
  else {
    $summary[] = t('Original image');
  }
  $link_types = array(
    'content' => t('Linked to content'),
    'file' => t('Linked to file'),
  );
  // Display this setting only if image is linked.
  if (isset($link_types[$settings['image_link']])) {
    $summary[] = $link_types[$settings['image_link']];
  }
  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function resp_img_grid_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  
  // Check if the formatter involves a link.
  if ($display['settings']['image_link'] == 'content') {
    $uri = entity_uri($entity_type, $entity);
  }
  elseif ($display['settings']['image_link'] == 'file') {
    $link_file = TRUE;
  }
  foreach ($items as $delta => $item) {
    if (isset($link_file)) {
      $uri = array(
        'path' => file_create_url($item['uri']),
        'options' => array(),
      );
    }
    $element[$delta] = array(
      '#theme' => 'custform_formatter',
      '#item' => $item,
      '#image_style' => $display['settings']['image_style'],
      '#path' => isset($uri) ? $uri : '',
    );
  }
  return $element;
}

/**
 * Implements hook_theme().
 */
function resp_img_grid_theme() {
  return array(
    'custform_formatter' => array(
      'variables' => array('item' => NULL, 'path' => NULL, 'image_style' => NULL),
    ),
  );
}

/**
 * Theme function displays an image rendered using the specified style.
 */
function theme_custform_formatter($variables) {
  $picTitle = '';
  $item = $variables['item'];
  $image = array(
    'path' => $item['uri'],
    'alt' => $item['alt'],
  );
  // Do not output an empty 'title' attribute.
  if (drupal_strlen($item['title']) > 0) {
    $image['title'] = $item['title'];
  }
  
  if ($variables['image_style']) {
    $image['style_name'] = $variables['image_style'];
    $output = theme('image_style', $image);
  }
  else {
    $output = theme('image', $image);
  }
  
  if ($variables['path']) {
    $path = $variables['path']['path'];
    $options = $variables['path']['options'];
    // When displaying an image inside a link, the html option must be TRUE.
    $options['html'] = TRUE;
    $output = l($output, $path, $options);
  }
  
  // Do not output an empty 'title' attribute.
  if (isset($item['title']) && drupal_strlen($item['title']) > 0) {
    $image['title'] = $item['title'];
    $picTitle = '<div class="titleBox">'. $image['title'] .'</div>';
  }
  return '<div class="box"><div class="boxInner">' . $output . $picTitle . '</div></div>';
}