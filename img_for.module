<?php
/**
 * Implements hook_field_formatter_info().
 */
function img_for_field_formatter_info() {
  $formatters = array(
    'img_for_formatter' => array(
      'label' => t('Gallery Image'),
      'description' => t('Style groups of images or files as a img_for gallery.'),
      'field types' => array('image'),
      'settings' => array_merge($base_settings, array(
        'image_style' => '',
        // 'thumb_style' => 'juicebox_square_thumbnail',
        'caption_source' => '',
        'title_source' => '',
      )),
    ),
  );
  return $formatters;
}

/**
 * Implements hook_field_formatter_view(). This code just passes straight
 * through to a theme function, MYMODULE_formatter_FORMATTER
 * (e.g. MYMODULE_formatter_MYMODULE_absolute_url).
 */
function img_for_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
   
   // Ease access to settings
  $settings = $display['settings'];
  $element = array();
  
  foreach ($items as $delta => $item) {
    if (isset($link_file)) {
      $uri = array(
        'path' => file_create_url($item['uri']),
        'options' => array(),
      );
    }
    $element[$delta] = array(
      '#theme' => 'img_for',
      '#item' => $item,
      // '#markup' => "<strong>BOLD</strong>",
      '#image_style' => $settings['image_style'],
      '#path' => isset($uri) ? $uri : '',
    );
  }
 
 // And return a renderable array
 return $element;
}

/**
 * Returns HTML for an image field formatter.
 *
 * @param $variables
 *   An associative array containing:
 *   - item: Associative array of image data, which may include "uri", "alt",
 *     "width", "height", "title" and "attributes".
 *   - image_style: An optional image style.
 *   - path: An array containing the link 'path' and link 'options'.
 *
 * @ingroup themeable
 */
// function theme_img_for_image($variables) {
//   $item = $variables['item'];
//   $image = array(
//     'path' => $item['uri'],
//   );
//   
//   $options['html'] = TRUE;
//   
//   if (array_key_exists('alt', $item)) {
//     $image['alt'] = $item['alt'];
//   }
// 
//   if (isset($item['attributes'])) {
//     $image['attributes'] = $item['attributes'];
//   }
// 
//   if (isset($item['width']) && isset($item['height'])) {
//     $image['width'] = $item['width'];
//     $image['height'] = $item['height'];
//   }
// 
//   // Do not output an empty 'title' attribute.
//   if (isset($item['title']) && drupal_strlen($item['title']) > 0) {
//     $image['title'] = $item['title'];
//   }
// 
//   if ($variables['image_style']) {
//     $image['style_name'] = $variables['image_style'];
//     $output = theme('image_style', $image);
//   }
//   else {
//     $output = theme('image', $image);
//   }
// 
//   // The link path and link options are both optional, but for the options to be
//   // processed, the link path must at least be an empty string.
//   if (isset($variables['path']['path'])) {
//     $path = $variables['path']['path'];
//     $options = isset($variables['path']['options']) ? $variables['path']['options'] : array();
//     // When displaying an image inside a link, the html option must be TRUE.
//     $options['html'] = TRUE;
//     $output = l($output, $path, $options);
//   }
//   
//   dpm($output);
//   
//   // return '<div class="box">\n<div class="boxInner">' . $output . '<div class="titleBox">' . $image['title'] . '</div></div></div>';
//   return $output;
// }

/**
 * Theme function displays an image rendered using the specified style.
 *
 * @ingroup image_example
 */
function theme_img_for($variables) {
  $image = $variables['image'];
  $style = $variables['style'];

  // theme_image_style() is the primary method for displaying images using
  // one of the defined styles. The $variables array passed to the theme
  // contains the following two important values:
  // - 'style_name': the name of the image style to use when displaying the
  //   image.
  // - 'path': the $file->uri of the image to display.
  //
  // When given a style and an image path the function will first determine
  // if a derivative image already exists, in which case the existing image
  // will be displayed. If the derivative image does not already exist the
  // function returns an <img> tag with a specially crafted callback URL
  // as the src attribute for the tag. When accessed, the callback URL will
  // generate the derivative image and serve it to the browser.
  $output = theme('image_style',
    array(
      'style_name' => $style,
      'path' => $image->uri,
      'getsize' => FALSE,
    )
  );
  $output .= '<p>' . t('This image is being displayed using the image style %style_name.', array('%style_name' => $style)) . '</p>';
  return $output;
}

